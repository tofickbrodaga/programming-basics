Паттерн Адаптер(Adapter)
*адаптирует Adaptee к Target, перепоручая действия конкретному классу Adaptee. Поэтому
данный паттерн не будет работать, если захотим адаптировать и класс, и подклассы.
* позволяет адаптеру Adaptee заместить некоторые операции адаптируемого класса Adaptee,
так как Adapter — это подкласс Adaptee.
*вводит только один новый объект. Чтобы добраться до адаптируемого класса, не нужно
никакого дополнительного обращения по указателю.

Паттерн Фасад(Facade)
Это паттерн, структурирующий объекты. Он предоставляет унифицированный интерфейс
вместо набора интерфейсов некоторой подсистемы. Фасад определяет интерфейс более
высокого уровня, который упрощает интерфейсы.
*хотите предоставить простой интерфейс к сложной подсистеме.
*между клиентами и классами реализации абстракции существует много зависимостей.
Фасад позволит отделить подсистему как от клиентов, так и от других подсистем.
*вы хотите разложить подсистему на отдельные слои. Исп фасад для определения точки
входа на каждый уровень подсистемы

Паттерн Мост(Bridge)
Это паттерн, структурирующий объекты. Он нужен, чтобы отделить абстракцию от ее
реализации так, чтобы то и другое можно было изменять независимо.
Используйте паттерн мост, когда:
*хотите избежать постоянной привязки абстракции к реализации.
*и абстракции, и реализации должны расширяться новыми подклассами. Мост позволяет
комбинировать разные абстракции и реализации, и изменять их независимо.
*изменения в реализации абстракции не должны сказываться на клиентах, то есть
клиентский код не должен перекомпилироваться.
*число классов начинает быстро расти. Признак того, что иерархию надо разделить на две
части.
*вы хотите разделить одну реализацию между несколькими объектами(подсчет ссылок,
например), этот факт необходимо скрыть от клиента.

Паттерн Компоновщик(Composite)
Это паттерн, структурирующий объекты. Компонует объекты в древовидные структуры для
представления иерархии часть — целое. Позволяет клиентам единообразно трактовать

Паттерн Декоратор(Decorator)
Это паттерн, структурирующий объекты. Он динамически добавляет объекту новые
обязанности. Является гибкой альтернативой порождению подклассов с целью расширения
функциональности.

Паттерн Приспособленец(Flyweight)
Это паттерн, структурирующий объекты. Использует разделение для эффективной
поддержки множества мелких объектов.
Используйте, когда все нижеприведенные условия выполнены одновременно:
*в приложении используется большое число объектов
*из-за этого накладные расходы на хранение высоки
*большую часть состояния объектов можно вынести вовне
*многие группы объектов можно заменить относительно небольшим количеством
разделяемых объектов, поскольку внешнее состояние вынесено.
*приложение не зависит от идентичности объекта. Поскольку объекты-приспособленцы
могут разделяться, то проверка на идентичность возвратит «истину» для концептуально
различных объектов.

Паттерн Заместитель(Proxy)
Это паттерн, структурирующий объекты. Является сурогатом другого объекта и контролирует
доступ к нему. Этот паттерн применим во всех случаях, когда возникает необходимость
сослаться на объект более изощеренно, чем это возможно, если использовать простой
указатель.
Примеры:
*удаленный заместитель может предоставлять доступ к объекту в другом адресном
пространстве.
*защищающий заместитель может ограничивать доступ к другому объекту.
*виртуальный заместитель может создавать тяжелые объекты по требованию(изображение,
файлы)
Результаты:
*удаленный заместитель может скрыть тот факт, что объект находится в другом адресном
пространстве.
*виртуальный заместитель может выполнять оптимизацию, например, создание объектов по
требованию.
*защищающий заместитель и «умная» ссылка позволяют решать дополнительные задачи при
доступе к объекту.

